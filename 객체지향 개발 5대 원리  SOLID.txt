객체지향 개발 5대 원리 : SOLID
❓ 왜 이러한 원칙에 맞춰 프로젝트를 설계해야할까?
✅ 유지 보수가 쉽고, 기능 확장에 유연한 웹 애플리케이션 개발을 위해서 사용한다.

❓ 핵심내용
✅ 단일 책임의 원칙(SRP : Single Responsibility Principle)
- 작성된 클래스는 하나의 기능만 가져야 한다.
- 각 클래스 당 하나의 기능(책임)을 부여함으로서 클래스 간의 관계의 복잡도를 줄이도록 설계.
- 일례로, UserService 라는 클래스 내 회원 가입 관련 로직이 정의되어 있다. 비밀번호 암호화 기능을 추가로 구현해야 하는 경우, 서비스에 직접 구현하기 보다는 별도의 클래스를 만들어 기능을 구현한 뒤, 해당 클래스에 접근하여 사용하도록 분리한다.

✅ 개방폐쇄의 원칙(OCP : Open Close Principle)
- 클래스 내 필드의 변경으로 인한 비용은 가능한 줄이고(private) 확장을 위한 비용은 가능한 극대화 해야한다는 의미.
- 즉, 요구 사항의 변경이나 추가사항이 발생하더라도 기존의 코드를 수정하지 않아도 확장이 가능하도록 코드를 구현.(기존 코드의 재사용성을 높여야한다.)
- * 적용 방법
	- 변경될 것과 변경되지 않을 것을 구분.
	- 두 모듈이 만나는 지점에 인터페이스 정의.
	- 구현에 의존하기 보다는 인터페이스에 의존하도록 코드 작성.( 클래스 타입을 인터페이스 타입의 속성으로 사용한 뒤 실제 객체를 구현한 클래스로 생성하여 사용함으로서 확장에 유리하도록 정의한다.)

✅ 리스코브 치환의 원칙(LSP : The Liskov Substitution Principle)
- 올바른 상속 관계의 특징을 정의하기 위한 원칙.
- 하위 타입은 상위 타입을 대체할 수 있어야 한다는 원칙. 즉, 클라이언트 측에서 상위 타입이 하위 타입으로 변경되어도 차이점을 인식하지 못한 채 상위 타입의 퍼블릭 인터페이스를 통해 서브 클래스를 사용할 수 있어야 한다는 것.
- 다형성 적용을 위해 기반 클래스와 서브 클래스 간의 규약(인터페이스)를 지켜야 한다.(예외 처리 포함)
- 대체 가능성을 결정하는 것은 클라이언트 입장에서 생각해야 함.

✅ 인터페이스 분리의 원칙(ISP : Interface Segregation Principle)
- 클라이언트의 목적과 용도에 적합한 인터페이스 만을 제공하는 것.
- 모든 클라이언트는 각자 자신의 관심에 맞는 인터페이스만을 접근하여 불필요한 간섭을 최소화 할 수 있도록 한다.
- 가능한 최소한의 인터페이스를 구현해야 한다.
- 서로 다른 성격의 인터페이스를 명백하게 구분해야 한다.

✅ 의존성역전의 원칙(DIP : Dependency Inversion Principle)
- 구조적으로 고수준 모듈은 저수준 모듈의 구현에 의존해서는 안되며, 저수준 모듈이 고수준 모듈에 의존해야 한다는 것이다. 
	- 고수준 모듈 : 비즈니스 로직과 관련된 추상화된 모듈
	- 저수준 모듈 : 입력과 출력에 가까운 구현 모듈
- 결국, 비지니스와 관련된 부분이 세부 사항에는 의존하지 않는 설계 원칙을 의미.
- 예를 들면, User Service라는 클래스에 비밀번호 암호화를 위한 클래스를 의존 시, 필요 기능을 구현한 클래스를 직접 구현하는 것이 아니라, 해당 클래스의 상위 인터페이스를 사용하여 의존을 주입받도록 한다.
참고 URL :
 https://www.nextree.co.kr/p6960/
https://mangkyu.tistory.com/194

질의 
클래스 1과 클래스 2가 상속관계인 경우, 인터페이스1을 만들어 클래스1이 구현하도록 수정, 클래스2가 클래스1을 상속받도록 수정하면되나요?

